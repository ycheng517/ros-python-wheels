name: Test ROS Python Wheels Matrix

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

jobs:
  test-matrix:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          # Debian slim with different ROS distros
          # - python-version: "3.10"
          #   os-type: debian-slim
          #   container: python:3.10-slim
          #   install-cmd: apt-get update && apt-get install -y git
          #   ros-distro: humble
          #   use-venv: false
          - python-version: "3.13"
            os-type: debian-slim
            container: python:3.13-slim
            install-cmd: apt-get update && apt-get install -y git
            ros-distro: jazzy
            use-venv: false
          - python-version: "3.10"
            os-type: debian-slim
            container: python:3.10-slim
            install-cmd: apt-get update && apt-get install -y git
            ros-distro: jazzy
            use-venv: false
          # - python-version: "3.13"
          #   os-type: debian-slim
          #   container: python:3.13-slim
          #   install-cmd: apt-get update && apt-get install -y git
          #   ros-distro: kilted
          #   use-venv: false
          # Ubuntu with different ROS distros
          # - python-version: "3.10"
          #   os-type: ubuntu-22.04
          #   container: ubuntu:22.04
          #   install-cmd: apt-get update && apt-get install -y python3 python3-pip python3-venv git
          #   ros-distro: humble
          #   use-venv: true
          - python-version: "3.13"
            os-type: ubuntu-24.04
            container: ubuntu:24.04
            install-cmd: apt-get update && apt-get install -y git curl
            ros-distro: jazzy
            use-venv: true
          - python-version: "3.10"
            os-type: ubuntu-24.04
            container: ubuntu:24.04
            install-cmd: apt-get update && apt-get install -y git curl
            ros-distro: jazzy
            use-venv: true
          # - python-version: "3.13"
          #   os-type: ubuntu-24.04
          #   container: ubuntu:24.04
          #   install-cmd: apt-get update && apt-get install -y python3 python3-pip python3-venv git
          #   ros-distro: kilted
          #   use-venv: true

    container:
      image: ${{ matrix.container }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install system dependencies
        run: ${{ matrix.install-cmd }}

      - name: Create virtual environment and install ROS Python packages
        if: matrix.use-venv == true
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          . $HOME/.local/bin/env
          uv venv -p python${{ matrix.python-version }}
          echo "$(pwd)/.venv/bin" >> $GITHUB_PATH
          uv pip install \
            --extra-index-url https://test.pypi.org/simple/ \
            ros-rclpy[fastrtps] ros-test-msgs pytest

      - name: Install ROS Python packages
        if: matrix.use-venv == false
        run: |
          python3 -m pip install \
            --extra-index-url https://test.pypi.org/simple/ \
            ros-rclpy[fastrtps] ros-test-msgs pytest

      - name: Basic test to see if rclpy init works
        shell: bash
        run: |
          # The '-' tells python3 to read the script from standard input
          python3 - <<EOF
          import rclpy
          rclpy.init()
          print('rclpy initialized successfully')
          rclpy.shutdown()
          EOF

      - name: Make test script executable
        run: chmod +x scripts/run_rclpy_tests.sh

      - name: Run rclpy tests
        run: ./scripts/run_rclpy_tests.sh ${{ matrix.ros-distro }}

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.os-type }}-${{ matrix.ros-distro }}-python${{ matrix.python-version }}
          path: |
            /tmp/rclpy_test/
          retention-days: 7
